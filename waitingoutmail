#!/bin/bash

##############################################################
#                     waitingoutmail                         #
# (c) 2018 waldo kitty (wkitty42) aka mark lewis             #
#                                                            #
# This program is free software: you can redistribute it     #
# and/or modify it under the terms of the GNU General Public #
# License as published by the Free Software Foundation,      #
# either version 2 of the License, or (at your option) any   #
# later version.                                             #
#                                                            #
# This program is distributed in the hope that it will be    #
# useful, but WITHOUT ANY WARRANTY; without even the implied #
# warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR    #
# PURPOSE.  See the GNU General Public License for more      #
# details.                                                   #
#                                                            #
# You should have received a copy of the GNU General Public  #
# License along with this program.  If not, see              #
# <https://www.gnu.org/licenses/>.                           #
#                                                            #
##############################################################
#                                                            #
# waitingmail is a simple (ha!) bash script to monitor a FTN #
# (Fidonet Technology Network BSO (Binkley-Style Outbound)   #
# directory structure used by FTN mailers to send waiting    #
# mail to other FTN systems.                                 #
#                                                            #
# currently waitingoutmail expects a 5D directory structure  #
# where each secondary FTN domain has its own outbound       #
# directory and each directory has an extension representing #
# the HEX value of the FTN's zone. this depends highly on    #
# how your FTN mail tosser creates and manages the BSO. Both #
# tosser and mailer must work together or mail will not be   #
# transported as desired.                                    #
#                                                            #
# eg:                                                        #
# 1st FTN address: 1:123/456@fidonet                         #
# 2nd FTN address: 27:321/654@foobar                         #
# 3rd FTN address: 432:987/345@riptide                       #
# 4th FTN address: 999:76/785@yanknet                        #
#                                                            #
# /bbs/ftn/out/fidonet                                       #
# /bbs/ftn/out/foobar.01b                                    #
# /bbs/ftn/out/riptide.1b0                                   #
# /bbs/ftn/out/yanknet.3e7                                   #
#                                                            #
##############################################################


# first set your system's path and default zone variables
SBBSDIR='/sbbs'
SBBSFTNOUTBASE="$SBBSDIR/ftn/out/*"
#FTNDEFAULTNETWORK='fidonet'
FTNDEFAULTZONE='001'


###############################
# Do not edit below this line #
###############################
# set the logging and current directory variables
THISVERSION=0.0.2
SCRIPTNAME=$(basename "$0")
LOGFILE=$0.log
CWD=$PWD

function elapsedtime () {
  local T=$1
  local D=$((T/60/60/24))
  local H=$((T/60/60%24))
  local M=$((T/60%60))
  local S=$((T%60))

  if (( D > 0 )); then
    printf "%s day" $D
    if (( D == 0 )) || (( D > 1 )); then printf "s"
    fi
    printf " "
  fi
  if (( H > 0 )); then
    if (( H >= 0 )) && (( H <= 9 )); then
      printf "0"
    fi
    printf "%s:" $H
  fi
  if (( M > 0 )); then
    if (( M >= 0 )) && (( M <= 9 )); then
      printf "0"
    fi
    printf "%s:" $M
  fi
  if (( S >= 0 )) && (( S <= 9 )); then
    printf "0"
  fi
  printf "%s" $S
}

function rotate () {
  # minimum file size to rotate in MBi:
  local MB="$1"
  # filename to rotate (full path)
  local F="$2"
  local msize="$((1024*1024*MB))"
  test -e "$F" || return 2

  local D
  D="$(dirname "$F")"
  local E=${F##*.}
  local B
  B="$(basename "$F" ."$E")"

  local s=

#  printf "** rotate msize=$msize file=$F -> $D | $B | $E\n"
  if [ "$(stat --printf %s "$F")" -ge $msize ] ; then
     for i in 8 7 6 5 4 3 2 1 0; do
       s="$D/$B-$i.$E"
       test -e "$s" && mv "$s" "$D/$B-$((i+1)).$E"
       # emtpy command is need to avoid exit iteration if test fails:
       :;
     done &&
     mv "$F" "$D"/"$B"-0."$E"
#  else
#     printf "** rotate skip: $F < $msize, skip\n"
  fi
  return $?
}

strindex() { 
  x="${1%%$2*}"
  [[ "$x" = "$1" ]] && echo -1 || echo "${#x}"
}

# rotate the log file before we start using it
rotate 0 "$LOGFILE"

# Redirect stdout ( > ) into a named pipe ( >() ) running "tee"
exec > >(tee "$LOGFILE")

# Without this, only stdout would be captured - i.e. your
# log file would not contain any error messages.
exec 2>&1


## do your script work commands here

SDATE1=$(date +"%s")
printf "********** %s v%s **********\n" "$SCRIPTNAME" "$THISVERSION"
printf "********** %s **********\n" "$(date --date="@$SDATE1" +'%Y-%m-%d %H:%M:%S %z')"
for outpath in $SBBSFTNOUTBASE; do
  nopathpname=${outpath##*/}
  currentdomain=${nopathpname%%.*}
  extpname=$([[ "$nopathpname" = *.* ]] && echo ".${nopathpname##*.}" || echo ".$FTNDEFAULTZONE")
  pathext=${extpname#*.}
  flist=$(find "$outpath" -type f \( -iname '*.?ut' -o -iname '*.?lo' \) | sed -e "s/.ut$\|.lo$//g" | sort | uniq)

  # count systems
  flistcnt=$(printf "%s" "$flist" | grep -c "^")
  if (( flistcnt > 0 )); then
    printf "%-2s for %-10s" "$flistcnt" "$currentdomain"
    if [ "$pathext" != $FTNDEFAULTZONE ]; then
      printf "z%d" 0x"$pathext"
    fi
    printf "\n"

    if [ -n "$flist" ]; then
      for hexaddr in $flist; do
#        printf "working with hexaddr %s\n" "$hexaddr"
        for ext in out hut cut dut iut flo hlo clo dlo ilo; do
          file=$hexaddr$ext
#          printf "looking for file or directory %s\n" "$file"
          if [[ -f ${file} ]]; then
#            printf "found file or directory %s\n" "$file"
            # is it a file or a directory?
            idx=$(strindex "$file" .pnt)
            if (( idx == -1 )); then
#              printf "working on a normal directory\n"
              nopathfname=${file##*/}
#              printf "  nopathfname: \"%s\"\n" "$nopathfname"
              noextfname=${nopathfname%.*}
#              printf "  noextfname: \"%s\"\n" "$noextfname"
              ftnaddress="$(printf "%d:%d/%d.%d" 0x"$pathext" 0x"${noextfname:0:4}" 0x"${noextfname:4}" 0)"
              # get the flo file type; f - normal, c - crash, h - hold, d - direct, i - immediate
              floext=${nopathfname#*.}
            else
#              printf "working on a point directory\n"
              pntdir=$(basename "$(dirname "$file")")
#              printf "pntdir: %s\n" "$pntdir"
              noextpntdir=${pntdir%.*}
#              printf "noextpntdir: %s\n" "$noextpntdir"
              nopathfname=${file##*/}
#              printf "  nopathfname: \"%s\"\n" "$nopathfname"
              noextfname=${nopathfname%.*}
#              printf "  noextfname: \"%s\"\n" "$noextfname"
              ftnaddress="$(printf "%d:%d/%d.%d" 0x"$pathext" 0x"${noextpntdir:0:4}" 0x"${noextpntdir:4}" 0x"${noextfname:0:8}")"
              # get the flo file type; f - normal, c - crash, h - hold, d - direct, i - immediate
              floext=${nopathfname#*.}
            fi
            flotype=${floext:0:1}
            unset name
            unset namedt
            unset oldest
            if [[ -f ${file} ]]; then
              if [ "${file: -2}" == ut ]; then
                outstr="netmail"

                for foo in "$hexaddr".?lo; do
                  if [ ! -e "$foo" ]; then
                    # get waiting ?ut age only if there's no waiting ?lo
                    [ "${file}" -ot "${oldest=$file}" ] && oldest=${file}
                    namedt=$(stat -c %Y "$oldest")
                  else
                    outstr=$outstr" and "
                  fi
                done

              fi
              if [ "${file: -2}" == lo ]; then
                # count the number of lines without leading "~" or "!"
                # see FTSC-5005 section 3.1 for their meaning and why
                # we are skipping them in this count
                waitingfiles=$(grep -cv "^(\~|\!)" "$file")
                if [ ${#outstr} == 0 ]; then
                  outstr="$waitingfiles file"
                else
                  outstr="$outstr $waitingfiles file"
                fi
                if [ ! "$waitingfiles" == 1 ]; then
                  outstr=$outstr"s"
                fi
                # now let's actually read the list in the ?lo file and find the oldest of those files
                if [ "${file: -2}" == lo ]; then
                  while IFS= read -r name; do
                    # take into account sbbs tendency to write paths with leading ../
                    # so let's strip them first and replace with the sbbs root directory
                    # defined at the top of this script
                    if [ "${name::3}" == "^.." ] ; then
                      name=${name/^../$SBBSDIR}
                    fi
                    # see FTSC-5005 section 3.1 for the use of the following characters
                    # so you understand why we strip off them off the file names we're
                    # going to try to stat
                    if [[ ${name::1} == "^" || ${name::1} == "-" || ${name::1} == "#" || ${name::1} == "@" ]] ; then
                      # strip off the "^" or "#" and do not replace it at all
                      name=${name/^}
                      name=${name/-}
                      name=${name/#}
                      name=${name/@}
                    fi
                    # and finally if the first character is "~" or "!" then the file is already sent
                    # so don't try to count it
                    if [[ ! ${name::1} == "~" && ! ${name::1} == "!" ]] ; then
                      [ "${name}" -ot "${oldest=$name}" ] && oldest=${name}
                      namedt=$(stat -c %Y "$oldest")
                    fi
                  done < "$file"  # while IFS= read
                fi
              fi
            fi
          fi
        done # for ext in
        printf "%2s %-23s (%s) : $outstr" "$([ "$flotype" == "f" ] && echo "-" || echo "$flotype")" "$ftnaddress" "$noextfname"
        if [ -n "$namedt" ]; then
          printf " : "
          DIFF=$((SDATE1-namedt))
          elapsedtime $DIFF
        fi
        printf "\n"
        outstr=
        pntdir=
      done  # for hexaddr in $flist
    else
      printf "there is no outbound mail waiting for delivery.\n"
    fi
#  printf "\n"
  fi # if (( flistcnt > 0 ))
done
#printf "***********************************************\n"
printf "\n"


## end of your script work commands
unset VAR1
unset VAR2

# return to the directory we were in when we started the script
cd "$CWD" || exit
